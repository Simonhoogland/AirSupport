#define MAVLINK_MAX_PAYLOAD_LEN 96

#include <stm32f4xx.h>
#include <stm32f4xx_usart.h>
#include <stm32f4xx_gpio.h>
#include <stm32f4xx_rcc.h>
#include <misc.h>
#include <stdio.h>
#include <common/mavlink.h>
#include <common/common.h>
#include <ardupilotmega/version.h>
#include <ardupilotmega/mavlink.h>
#include <ardupilotmega/ardupilotmega.h>

#define MAX_STRLEN 12
#define MAX_STRLENSEND 12
volatile char send_string[MAX_STRLENSEND+1];
volatile char received_string[MAX_STRLEN+1];

int heartbeat_check = 0;
void USART_puts(USART_TypeDef* USARTx, volatile char *s){

	while(*s){
		if (*s == 0) break;
		while( !(USARTx->SR & 0x00000040) );
		USART_SendData(USARTx, *s);
		*s++;
	}
}

void InitUsart1(void) {
	GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
	USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
	NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)


	//Enable clock of pints & UART
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

    //setup GPIO
    GPIO_InitStruct.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStruct.GPIO_Mode  = GPIO_Mode_AF;  // alternate pins
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; // pull-up
    GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_UP;  // pull-up
    GPIO_Init(GPIOB, &GPIO_InitStruct);
    //Do pin-assignment
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);

    // Setup UART
    USART_InitStruct.USART_BaudRate            = 57600;
    USART_InitStruct.USART_WordLength          = USART_WordLength_8b;
    USART_InitStruct.USART_StopBits            = USART_StopBits_1;
    USART_InitStruct.USART_Parity              = USART_Parity_No;
    USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStruct.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
    USART_Init(USART1, &USART_InitStruct);

    // Enable Interrupt
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);

    // Init interrupt
    NVIC_InitStructure.NVIC_IRQChannel                   = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    //Enable UART port
    USART_Cmd(USART1, ENABLE);
}

void InitUsart6(void) {

	GPIO_InitTypeDef GPIO_InitStruct;
	USART_InitTypeDef USART_InitStruct;
	NVIC_InitTypeDef NVIC_InitStructure;

    //Enable clock of pints & UART
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC , ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);

    //setup GPIO
    GPIO_InitStruct.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStruct.GPIO_Mode  = GPIO_Mode_AF;  // alternate pins
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; // pull-up
    GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_UP;  // pull-up
    GPIO_Init(GPIOC, &GPIO_InitStruct);

    //Do pin-assignment
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6);
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);

    // Setup UART
    USART_InitStruct.USART_BaudRate            = 57600;
    USART_InitStruct.USART_WordLength          = USART_WordLength_8b;
    USART_InitStruct.USART_StopBits            = USART_StopBits_1;
    USART_InitStruct.USART_Parity              = USART_Parity_No;
    USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStruct.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
    USART_Init(USART6, &USART_InitStruct);

    // Enable Interrupt
    USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);

    // Init interrupt
    NVIC_InitStructure.NVIC_IRQChannel                   = USART6_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
    NVIC_Init(&NVIC_InitStructure);

    //Enable UART port
    USART_Cmd(USART6, ENABLE);
}

int main(void)
{
	InitUsart1();
	InitUsart6();

    USART_puts(USART1, "Hello World!\r\n");
    USART_puts(USART1, "***********************************\r\n");
    USART_puts(USART1, "*                                 *\r\n");
    USART_puts(USART1, "* Author: Tim Karman & Tom Flipse *\r\n");
    USART_puts(USART1, "*                                 *\r\n");
    USART_puts(USART1, "***********************************\r\n");

    //init variables
    mavlink_message_t msg;
    uint8_t buf[MAVLINK_MAX_PACKET_LEN];

    //set struct for message
    mavlink_command_long_t command;
    command.command = MAV_CMD_COMPONENT_ARM_DISARM;
    command.param1 = 1; //0 to disarm
    command.confirmation = 0;
    command.target_component = MAV_COMP_ID_SYSTEM_CONTROL;
    command.target_system = 1;

    //create message
    mavlink_msg_command_long_encode(MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_ARDUPILOTMEGA,
    &msg, &command);

    //compress & copy to buffer
    uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);

    //send to APM
    uint16_t i;
    for (i = 0; i < len; i++) {
        while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
        USART_SendData(USART1, buf[i]);
    }

    while(1)
    {
    	//global variables
    	uint8_t AIRSUPPORT_MAV_MODE = MAV_MODE_PREFLIGHT;
    	uint8_t AIRSUPPORT_MAV_STATE = MAV_STATE_STANDBY;

    	//init variables
    	mavlink_message_t msg;
    	uint8_t buf[MAVLINK_MAX_PACKET_LEN];
    	if(heartbeat_check == 1)
    	{
    		//create message
    		mavlink_msg_heartbeat_pack(MAV_TYPE_GCS, MAV_AUTOPILOT_INVALID, &msg,
    		MAV_TYPE_GCS, MAV_AUTOPILOT_INVALID,
    		AIRSUPPORT_MAV_MODE, 0, AIRSUPPORT_MAV_STATE);

    		//compress & copy to buffer
    		uint16_t len = mavlink_msg_to_send_buffer(buf, &msg);

    		//send to APM
    		uint16_t i;
    		for (i = 0; i < len; i++) {
    			while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
    			USART_SendData(USART1, buf[i]);
    		}
    	}
    }
}

void USART1_IRQHandler(void){
	if( USART_GetITStatus(USART1, USART_IT_RXNE) ){

		static uint8_t cnt = 0; // this counter is used to determine the string length
		char t = USART1->DR; // the character from the USART1 data register is saved in t

		/* check if the received character is not the LF character (used to determine end of string)
	     * or the if the maximum string length has been been reached
	 	 */
		if( (t != '\n') && (cnt < MAX_STRLEN) ){
			received_string[cnt] = t;
			cnt++;
		}
		else{ // otherwise reset the character counter and print the received string
			cnt = 0;
			USART_puts(USART1, received_string);
		}
	}
}


void decodeMAVlinkMsg(mavlink_message_t *msg) {
    //message type definitions (not allowed in switch!)
    mavlink_heartbeat_t heart;

    //switch on message id
    switch (msg->msgid) {
        case MAVLINK_MSG_ID_HEARTBEAT:

            //decode heartbeat
            mavlink_msg_heartbeat_decode(msg, &heart);

            //show result in our awesome USART_puts function
            USART_puts(USART1, "heartbeat: ");
            USART_SendData(USART1, msg->msgid);
            USART_puts(USART1, "pilot: ");
            USART_SendData(USART1, heart.autopilot);
            USART_puts(USART1, "type: ");
            USART_SendData(USART1, heart.type);
            USART_puts(USART1, "mode: ");
            USART_SendData(USART1, heart.base_mode);
            USART_puts(USART1, "mavlink: ");
            USART_SendData(USART1, heart.mavlink_version);
            USART_puts(USART1, "status: ");
            USART_SendData(USART1, heart.system_status);
            break;
    default:
    	USART_puts(USART1, "Not decoded id:  \n\r");
    	USART_SendData(USART1, msg->msgid);
        break;
    }
}

void USART6_IRQHandler(void){
	if( USART_GetITStatus(USART6, USART_IT_RXNE) ){

		//static uint8_t cnt = 0;
		uint16_t data = USART6->DR;

		mavlink_message_t msg;
		mavlink_status_t status;
		heartbeat_check = 1;
		if (mavlink_parse_char(MAVLINK_COMM_0, data, &msg, &status)) {
			//while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
			USART_puts(USART1, "status222222");
			decodeMAVlinkMsg(&msg);
		}
		//while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET);
		USART_puts(USART1, "status11111");

		/*
		if( (data != '\n') && (cnt < MAX_STRLENSEND) ){
			send_string[cnt] = data;
			cnt++;
		}
		else{
			cnt = 0;
			USART_puts(USART6, send_string);
		}*/
	}
}
