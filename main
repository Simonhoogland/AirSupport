#include <stm32f4xx.h>
#include <stm32f4xx_usart.h>
#include <stm32f4xx_gpio.h>
#include <stm32f4xx_rcc.h>
#include <misc.h>
#include <stdio.h>

#define MAX_STRLEN 12
#define MAX_STRLENSEND 12
volatile char send_string[MAX_STRLENSEND+1];
volatile char received_string[MAX_STRLEN+1];

void USART_puts(USART_TypeDef* USARTx, volatile char *s){

    while(*s){
        // wait until data register is empty
	while( !(USARTx->SR & 0x00000040) );
	USART_SendData(USARTx, *s);
	*s++;
    }
}

void InitUsart1(void) {
    GPIO_InitTypeDef GPIO_InitStruct; // this is for the GPIO pins used as TX and RX
    USART_InitTypeDef USART_InitStruct; // this is for the USART1 initilization
    NVIC_InitTypeDef NVIC_InitStructure; // this is used to configure the NVIC (nested vector interrupt controller)


    //Enable clock of pints & UART
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB , ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);

    //setup GPIO
    GPIO_InitStruct.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStruct.GPIO_Mode  = GPIO_Mode_AF;  // alternate pins
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; // pull-up
    GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_UP;  // pull-up
    GPIO_Init(GPIOB, &GPIO_InitStruct);
    //Do pin-assignment
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
    GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);

    // Setup UART
    USART_InitStruct.USART_BaudRate            = 57600;
    USART_InitStruct.USART_WordLength          = USART_WordLength_8b;
    USART_InitStruct.USART_StopBits            = USART_StopBits_1;
    USART_InitStruct.USART_Parity              = USART_Parity_No;
    USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStruct.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
    USART_Init(USART1, &USART_InitStruct);

    // Enable Interrupt
    USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);

    // Init interrupt
    NVIC_InitStructure.NVIC_IRQChannel                   = USART1_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    //Enable UART port
    USART_Cmd(USART1, ENABLE);
}

void InitUsart6(void) {

    GPIO_InitTypeDef GPIO_InitStruct;
    USART_InitTypeDef USART_InitStruct;
    NVIC_InitTypeDef NVIC_InitStructure;

    //Enable clock of pints & UART
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC , ENABLE);
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART6, ENABLE);

    //setup GPIO
    GPIO_InitStruct.GPIO_Pin   = GPIO_Pin_6 | GPIO_Pin_7;
    GPIO_InitStruct.GPIO_Mode  = GPIO_Mode_AF;  // alternate pins
    GPIO_InitStruct.GPIO_Speed = GPIO_Speed_50MHz;
    GPIO_InitStruct.GPIO_OType = GPIO_OType_PP; // pull-up
    GPIO_InitStruct.GPIO_PuPd  = GPIO_PuPd_UP;  // pull-up
    GPIO_Init(GPIOC, &GPIO_InitStruct);

    //Do pin-assignment
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource6, GPIO_AF_USART6);
    GPIO_PinAFConfig(GPIOC, GPIO_PinSource7, GPIO_AF_USART6);

    // Setup UART
    USART_InitStruct.USART_BaudRate            = 57600;
    USART_InitStruct.USART_WordLength          = USART_WordLength_8b;
    USART_InitStruct.USART_StopBits            = USART_StopBits_1;
    USART_InitStruct.USART_Parity              = USART_Parity_No;
    USART_InitStruct.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
    USART_InitStruct.USART_Mode                = USART_Mode_Tx | USART_Mode_Rx;
    USART_Init(USART6, &USART_InitStruct);

    // Enable Interrupt
    USART_ITConfig(USART6, USART_IT_RXNE, ENABLE);

    // Init interrupt
    NVIC_InitStructure.NVIC_IRQChannel                   = USART6_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelCmd                = ENABLE;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority        = 0;
    NVIC_Init(&NVIC_InitStructure);

    //Enable UART port
    USART_Cmd(USART6, ENABLE);
}

int main(void)
{
    InitUsart1();
    InitUsart6();

    USART_puts(USART1, "Hello World!\r\n");
    USART_puts(USART1, "***********************************\r\n");
    USART_puts(USART1, "*                                 *\r\n");
    USART_puts(USART1, "* Author: Tim Karman & Tom Flipse *\r\n");
    USART_puts(USART1, "*                                 *\r\n");
    USART_puts(USART1, "***********************************\r\n");

    while(1){

    }
}

void USART1_IRQHandler(void){
    if( USART_GetITStatus(USART1, USART_IT_RXNE) ){

	static uint8_t cnt = 0; // this counter is used to determine the string length
	char t = USART1->DR; // the character from the USART1 data register is saved in t

	/* check if the received character is not the LF character (used to determine end of string)
	 * or the if the maximum string length has been been reached
	 */
	if( (t != '\n') && (cnt < MAX_STRLEN) ){
            received_string[cnt] = t;
	    cnt++;
	}
	else{ // otherwise reset the character counter and print the received string
	    cnt = 0;
	    USART_puts(USART1, received_string);
	}
    }
}

void USART6_IRQHandler(void){
    if( USART_GetITStatus(USART6, USART_IT_RXNE) ){

	static uint8_t cnt = 0;
	char data = USART6->DR;

	if( (data != '\n') && (cnt < MAX_STRLENSEND) ){
	    send_string[cnt] = data;
	    cnt++;
	}
	else{
	    cnt = 0;
	    USART_puts(USART6, send_string);
	}
    }
}
